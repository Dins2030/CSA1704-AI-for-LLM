import heapq

def a_star(graph, start, goal, heuristic):
  open_set = []
  heapq.heappush(open_set, (0 + heuristic[start], 0, start, [start]))

  visited = set()

  while open_set:
    f, g, current, path = heapq.heappop(open_set)

    if current == goal:
      print("Shortest path found:", path)
      print("Total cost:", g)
      return

    if current in visited:
      continue

    visited.add(current)

    for neighbor, cost in graph[current].items():
      if neighbor not in visited:
        new_g = g + cost
        new_f = new_g + heuristic[neighbor]
        heapq.heappush(open_set, (new_f, new_g, neighbor, path + [neighbor]))

  print("No path found.")

# Example graph as adjacency list with edge costs
graph = {
  'A': {'B': 1, 'C': 4},
  'B': {'A': 1, 'C': 2, 'D': 5},
  'C': {'A': 4, 'B': 2, 'D': 1},
  'D': {'B': 5, 'C': 1}
}

# Heuristic values (straight-line distance estimate to goal 'D')
heuristic = {
  'A': 7,
  'B': 6,
  'C': 2,
  'D': 0
}

# Run A* algorithm
a_star(graph, start='A', goal='D')
