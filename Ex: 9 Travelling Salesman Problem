from itertools import permutations

def calculate_total_distance(route, distance_matrix):
  total_distance = 0
  for i in range(len(route) - 1):
    total_distance += distance_matrix[route[i]][route[i+1]]
  total_distance += distance_matrix[route[-1]][route[0]]  # Return to start
  return total_distance

def travelling_salesman(distance_matrix):
  n = len(distance_matrix)
  cities = list(range(n))
  
  min_distance = float('inf')
  best_route = []

  # Generate all possible routes (permutations of cities)
  for perm in permutations(cities):
    current_distance = calculate_total_distance(perm, distance_matrix)
    
    if current_distance < min_distance:
      min_distance = current_distance
      best_route = perm

  print("Best route:", best_route)
  print("Minimum distance:", min_distance)

# Example distance matrix (symmetric)
distance_matrix = [[0, 10, 15, 20], [10, 0, 35, 25], [15, 35, 0, 30], [20, 25, 30, 0]]

# Run the TSP solver
travelling_salesman(distance_matrix)
