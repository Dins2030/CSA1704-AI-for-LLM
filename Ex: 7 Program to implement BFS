from collections import deque

def bfs(graph, start_node):
  visited = set()    # To keep track of visited nodes
  queue = deque()    # Use queue for BFS
  
  queue.append(start_node)
  visited.add(start_node)

  print("BFS Traversal Order:")

  while queue:
    node = queue.popleft()
    print(node, end=' ')
    
    # Visit all neighbors of the current node
    for neighbor in graph[node]:
      if neighbor not in visited:
        visited.add(neighbor)
        queue.append(neighbor)

# Example graph represented as an adjacency list
graph = {'A': ['B', 'C'], 'B': ['A', 'D', 'E'], 'C': ['A', 'F'], 'D': ['B'], 'E': ['B', 'F'], 'F': ['C', 'E']}

# Run BFS starting from node 'A'
bfs(graph, 'A')
